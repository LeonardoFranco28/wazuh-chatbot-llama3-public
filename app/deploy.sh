#!/bin/bash

# Configuraci√≥n del servidor
SERVER_IP="YOUR_WAZUH_SERVER_IP"
SERVER_USER="YOUR_SERVER_USER"
SERVER_PATH="/home/YOUR_SERVER_USER/backend"
LOCAL_PATH="backend/"
SSH_PRIVATE_KEY="~/.ssh/YOUR_SERVER_USER_KEY"

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "üìã Uso del script de despliegue:"
    echo -e "  $0 [opci√≥n]"
    echo -e ""
    echo -e "Opciones disponibles:"
    echo -e "  docker      - Despliegue con Docker (recomendado)"
    echo -e "  ssh         - Enviar carpeta .ssh al servidor"
    echo -e "  help         - Mostrar esta ayuda"
    echo -e "Ejemplos:"
    echo -e "  $0 docker"
    echo -e "  $0 ssh"
}



# Funci√≥n para limpiar archivos temporales
cleanup_temp() {
    if [ ! -z "$1" ] && [ -d "$1" ]; then
        rm -rf "$1"
        echo -e "üßπ Archivos temporales limpiados${NC}"
    fi
}



# Funci√≥n para despliegue con Docker
deploy_docker() {
    echo -e "üê≥ Iniciando despliegue con Docker..."

    # Verificar que existe la carpeta local
    if [ ! -d "$LOCAL_PATH" ]; then
        echo -e "‚ùå Error: No se encuentra la carpeta $LOCAL_PATH"
        exit 1
    fi

   

    # Verificar que Docker est√° instalado en el servidor
    echo -e "üîç Verificando Docker en el servidor..."
    if ! ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "command -v docker &> /dev/null"; then
        echo -e "üí° Instalando Docker en el servidor..."
        ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo snap install docker"
    fi

  
    # Crear directorio en el servidor
    echo -e "üìÅ Creando directorio en el servidor..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "mkdir -p $SERVER_PATH"

    # Subir archivos usando scp
    echo -e "üì§ Subiendo archivos al servidor.."
    scp -i $SSH_PRIVATE_KEY -r $LOCAL_PATH/* $SERVER_USER@$SERVER_IP:$SERVER_PATH/

    if [ $? -eq 0 ]; then
        echo -e "‚úÖ Archivos subidos exitosamente"
    else
        echo -e "‚ùå Error al subir archivos"
        exit 1
    fi

    # Construir imagen Docker en el servidor
    echo -e "üî® Construyendo imagen Docker..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "cd $SERVER_PATH && sudo docker build  -t ia-networking-api ."

    # Detener contenedor existente si existe
    echo -e "üõë Deteniendo contenedor existente..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo docker stop ia-api 2>/dev/null || true"
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo docker rm ia-api 2>/dev/null || true"

    # Ejecutar nuevo contenedor
    echo -e "üöÄ Iniciando contenedor Docker..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo docker run -d --name ia-api --network=bridge -p 8000:8000 --restart unless-stopped ia-networking-api"

    # Configurar nginx con timeouts extendidos
    echo -e "üîß Configurando nginx..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo apt-get update && sudo apt-get install -y nginx"
    
    # Copiar configuraci√≥n de nginx
    scp -i $SSH_PRIVATE_KEY backend/nginx.conf $SERVER_USER@$SERVER_IP:/tmp/nginx.conf
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo cp /tmp/nginx.conf /etc/nginx/sites-available/ia-networking && sudo ln -sf /etc/nginx/sites-available/ia-networking /etc/nginx/sites-enabled/ && sudo rm /etc/nginx/sites-enabled/default && sudo systemctl restart nginx"

    # Verificar que el contenedor est√° ejecut√°ndose
    echo -e "üîç Verificando estado del contenedor..."
    if ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo docker ps | grep ia-api"; then
        echo -e "‚úÖ Contenedor ejecut√°ndose correctamente"
    else
        echo -e "‚ùå Error: El contenedor no se inici√≥ correctamente"
        echo -e "üìã Logs del contenedor:"
        ssh  -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "sudo docker logs ia-api"
        exit 1
    fi

    echo -e "üéâ Despliegue con Docker completado!"
    echo -e "üìã Informaci√≥n del despliegue:"
    echo -e "  üåê URL: http://$SERVER_IP:8000"
    echo -e "  üìä Health Check: http://$SERVER_IP:8000/health"
    echo -e "  üê≥ Contenedor: ia-api"
    echo -e ""
    echo -e "Comandos √∫tiles:"
    echo -e "  Ver logs: ssh  -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP 'sudo docker logs -f ia-api'"
    echo -e "  Reiniciar: ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP 'sudo docker restart ia-api'"
    echo -e "  Detener: ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP 'sudo docker stop ia-api'"
}

# Funci√≥n para enviar carpeta .ssh
deploy_ssh() {
    echo -e "üîë Enviando carpeta .ssh al servidor..."
    
    # Verificar que existe la carpeta .ssh local
    if [ ! -d "backend/.ssh" ]; then
        echo -e "‚ùå Error: No se encuentra la carpeta ~/.ssh"
        exit 1
    fi
    
    # Crear directorio .ssh en el servidor
    echo -e "üìÅ Creando directorio .ssh en el servidor..."
    ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "mkdir -p ~/.ssh"
    
    # Subir archivos .ssh usando scp
    echo -e "üì§ Subiendo archivos .ssh al servidor..."
    scp -i $SSH_PRIVATE_KEY -r backend/.ssh/* $SERVER_USER@$SERVER_IP:$SERVER_PATH/.ssh
    
    if [ $? -eq 0 ]; then
        echo -e "‚úÖ Carpeta .ssh enviada exitosamente"
        echo -e "üîß Configurando permisos..."
        ssh -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_IP "chmod 700 backend/.ssh/ && chmod 600 backend/.ssh/*"
        echo -e "‚úÖ Permisos configurados correctamente"
    else
        echo -e "‚ùå Error al enviar carpeta .ssh"
        exit 1
    fi
    
    echo -e "üéâ Configuraci√≥n SSH completada!"
}

# Verificar argumentos
if [ $# -eq 0 ]; then
    echo -e "‚ö†Ô∏è  No se especific√≥ m√©todo de despliegue"
    show_help
    exit 1
fi

case $1 in
    "traditional")
        deploy_traditional
        ;;
    "docker")
        deploy_docker
        ;;
    "ssh")
        deploy_ssh
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "‚ùå Opci√≥n inv√°lida: $1"
        show_help
        exit 1
        ;;
esac 